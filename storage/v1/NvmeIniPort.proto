//------------------------------------------------------------------------------
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved
//
// Protobuf specification for NVMe initiator port service
//------------------------------------------------------------------------------

syntax = "proto3";
package opi.storage.v1;
option go_package = "github.com/opiproject/opi-api/storage/proto";
import "CommonTypes.proto";

// initiator port service APIs
service InitiatorPortSvc {
  rpc InitiatorPortCreate (InitiatorPortCreateRequest) returns (InitiatorPortCreateResponse) {}
  rpc InitiatorPortGet (InitiatorPortGetRequest) returns (InitiatorPortGetResponse) {}
  rpc InitiatorPortDelete (InitiatorPortDeleteRequest) returns (InitiatorPortDeleteResponse) {}
}

// initiator port specification
message InitiatorPortSpec {
  // (mandatory) initiator port object key
  types.ObjectKey               InitiatorPortKey       = 1;
  // (mandatory) fabric transport type selection
  types.NvmeTransportType           TransportType      = 2;
  // (mandatory) Address family to use
  types.AddressFamily           AddrFamily             = 3;
  // (mandatory) Secure channel type
  types.NvmeFabricSecureChannelType SecureChannelType  = 4;
  // (mandatory) transport specific service id, Eg. TCP port, (utf-8)
  string                        TransportServiceId     = 5;
  // (mandatory) transport address, Eg. IPv4 address (utf-8)
  string                        TransportAddress       = 6;
  // (optional) Network Mask for address Range: (0 to 32)
  uint32                        NetMask                = 7;
}

// initiator port status
message InitiatorPortStatus {
}

// initiator port stats
message InitiatorPortStats {
}

// initiator port object
message InitiatorPort {
  InitiatorPortSpec   Spec   = 1; // initiator port specification
  InitiatorPortStatus Status = 2; // initiator port status
  InitiatorPortStats  Stats  = 3; // initiator port stats
}

// create request
message InitiatorPortCreateRequest {
  InitiatorPortSpec Spec = 1; // initiator port specification
}

// create response
message InitiatorPortCreateResponse {
  types.ApiStatus     ApiStatus = 1; // status code
}

// get request
message InitiatorPortGetRequest {
  types.ObjectKey InitiatorPortKey = 1; // object to get
}

// get response
message InitiatorPortGetResponse {
  types.ApiStatus  ApiStatus = 1; // status code
  InitiatorPort       Response  = 2; // object response
}

// delete request
message InitiatorPortDeleteRequest {
  types.ObjectKey InitiatorPortKey = 1; // unique key for this port
}

// delete response
message InitiatorPortDeleteResponse {
  types.ApiStatus     ApiStatus = 1; // status code
}
