//------------------------------------------------------------------------------
// {C} Copyright 2022 Pensando Systems Inc. All rights reserved
//
// Protobuf specification for NVMe NvmePath
//------------------------------------------------------------------------------

syntax = "proto3";
package opi.storage.v1;
option go_package = "github.com/opiproject/opi-api/storage/proto";
import "CommonTypes.proto";

// path serivce APIs
service NvmePathSvc {
  rpc NvmePathCreate (NvmePathCreateRequest) returns (NvmePathCreateResponse) {}
  rpc NvmePathGet (NvmePathGetRequest) returns (NvmePathGetResponse) {}
  rpc NvmePathUpdate (NvmePathUpdateRequest) returns (NvmePathUpdateResponse) {}
  rpc NvmePathDelete (NvmePathDeleteRequest) returns (NvmePathDeleteResponse) {}
}

// NVMe fabric endpoint
message NvmePathEndPoint {
  types.ObjectKey initiator_port_key = 1; // initiator endpoint
  types.ObjectKey target_port_key    = 2; // target endpoint
  types.ObjectKey initiator_dev_key  = 3; // initiator device
  types.ObjectKey tgt_subsystem_key  = 4; // target subsystem
}
// path parameters
message NvmePathParams {
  // backend queue id
  uint32             queue_id              = 1;
  // path mode
  types.NvmePathMode nvme_path_mode         = 2;
  // selection priority, paths are activated in the given priority order
  uint32             priority             = 3;
  /// wait time before retrying connect on failed block dev
  uint32             connect_retry_interval = 4;
  /// NvmePath Endpoint details
  NvmePathEndPoint   end_point             = 5;
}

// path status
message NvmePathStatus {
  types.NvmePathConnectionState connection_state = 1; // path connection state
}

// path stats
message NvmePathStats {
}

// path object
message NvmePath {
  NvmePathSpec   spec   = 1; // path specification
  NvmePathStatus status = 2; // path status
  NvmePathStats  stats  = 3; // path stats
}

// path specification
message NvmePathSpec {

  types.ObjectKey nvme_path_key  = 1; // path object key
  NvmePathParams  params       = 2; // path parameters
}

// create resuest
message NvmePathCreateRequest {
  NvmePathSpec spec = 1; // path specification
}

// create response
message NvmePathCreateResponse {
  types.ApiStatus api_status = 1; // status code
}

// update request
message NvmePathUpdateRequest {
  types.ObjectKey nvme_path_key = 1; // path object key
  NvmePathParams  params      = 2; // path parameters
}

// update response
message NvmePathUpdateResponse {
  types.ApiStatus api_status = 1; // status code
}

// get request
message NvmePathGetRequest {
  types.ObjectKey nvme_path_key = 1; // path object key
  types.ObjectKey ns_key       = 2; // (optional) namespace object key
}

// get response
message NvmePathGetResponse {
  types.ApiStatus api_status = 1; // status code
  NvmePath        response  = 2;
}

// delete request
message NvmePathDeleteRequest {
  types.ObjectKey nvme_path_key = 1;  // path object key
}

// delete response
message NvmePathDeleteResponse {
  types.ApiStatus api_status = 1; // status code
}
